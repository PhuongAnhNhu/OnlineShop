{"ast":null,"code":"import { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT } from \"../constants/userConstants\";\nimport axios from \"axios\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"api/users/login\", {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n}; // @desc    Register a new user\n// @route   POST /api/users\n// @access  Public\n\nexport const register = asyncHandler(async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n  const userExists = await User.findOne({\n    email\n  });\n\n  if (userExists) {\n    res.status(400);\n    throw new Error('User already exists');\n  }\n\n  const user = await User.create({\n    name,\n    email,\n    password\n  });\n\n  if (user) {\n    res.status(201).json({\n      _id: user._id,\n      name: user.name,\n      email: user.email,\n      isAdmin: user.isAdmin,\n      token: generateToken(user._id)\n    });\n  } else {\n    res.status(400);\n    throw new Error('Invalid user data');\n  }\n});\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/phuong.nhu/Documents/Development/Learn/onlineshopudemy/frontend/src/action/userAction.js"],"names":["USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","axios","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","asyncHandler","req","res","name","body","userExists","User","findOne","status","Error","user","create","json","_id","isAdmin","token","generateToken","getUserDetails","id","getState","USER_DETAILS_REQUEST","userLogin","userInfo","Authorization","get","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL"],"mappings":"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","sourcesContent":["import {\n  USER_LOGIN_FAIL,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGOUT,\n} from \"../constants/userConstants\";\nimport axios from \"axios\";\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const { data } = await axios.post(\n      \"api/users/login\",\n      { email, password },\n      config\n    );\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const logout = () => (dispatch)=> {\n  localStorage.removeItem('userInfo')\n  dispatch({type: USER_LOGOUT})\n}\n\n// @desc    Register a new user\n// @route   POST /api/users\n// @access  Public\nexport const register = asyncHandler(async (req, res) => {\n  const { name, email, password } = req.body\n\n  const userExists = await User.findOne({ email })\n\n  if (userExists) {\n    res.status(400)\n    throw new Error('User already exists')\n  }\n\n  const user = await User.create({\n    name,\n    email,\n    password,\n  })\n\n  if (user) {\n    res.status(201).json({\n      _id: user._id,\n      name: user.name,\n      email: user.email,\n      isAdmin: user.isAdmin,\n      token: generateToken(user._id),\n    })\n  } else {\n    res.status(400)\n    throw new Error('Invalid user data')\n  }\n})\n\n\n\n\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      },\n    };\n\n    const { data } = await axios.get(\n      `/api/users/${id}`,\n      config\n    );\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}